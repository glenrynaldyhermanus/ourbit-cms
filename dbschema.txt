-- DDL Terbaru untuk Skema Public

-- business_online_settings
CREATE TABLE public.business_online_settings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    business_id UUID NOT NULL,
    subdomain VARCHAR NOT NULL,
    contact_email VARCHAR NOT NULL,
    description TEXT,
    facebook_url TEXT,
    instagram_url TEXT,
    twitter_url TEXT,
    stock_tracking INTEGER NOT NULL,
    FOREIGN KEY (business_id) REFERENCES public.businesses(id)
);

-- businesses
CREATE TABLE public.businesses (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    name VARCHAR NOT NULL,
    code VARCHAR UNIQUE,
    description TEXT
);

-- categories
CREATE TABLE public.categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    business_id UUID NOT NULL,
    name VARCHAR NOT NULL,
    FOREIGN KEY (business_id) REFERENCES public.businesses(id)
);

-- cities
CREATE TABLE public.cities (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    name VARCHAR NOT NULL,
    province_id UUID NOT NULL,
    FOREIGN KEY (province_id) REFERENCES public.provinces(id)
);

-- countries
CREATE TABLE public.countries (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    name VARCHAR NOT NULL
);

-- inventory_transactions
CREATE TABLE public.inventory_transactions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    product_id UUID NOT NULL,
    store_id UUID NOT NULL,
    type INTEGER NOT NULL,
    quantity NUMERIC NOT NULL,
    reference VARCHAR,
    note TEXT,
    previous_qty NUMERIC,
    new_qty NUMERIC,
    batch_number VARCHAR,
    expiry_date DATE,
    unit_cost NUMERIC,
    total_cost NUMERIC,
    FOREIGN KEY (product_id) REFERENCES public.products(id),
    FOREIGN KEY (store_id) REFERENCES public.stores(id)
);

-- options
CREATE TABLE public.options (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    type TEXT NOT NULL,
    name TEXT NOT NULL,
    key TEXT NOT NULL,
    value TEXT NOT NULL
);

-- products
CREATE TABLE public.products (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    category_id UUID,
    store_id UUID NOT NULL,
    type TEXT NOT NULL,
    auto_sku BOOLEAN NOT NULL DEFAULT true,
    code VARCHAR UNIQUE,
    purchase_price NUMERIC NOT NULL DEFAULT 0,
    selling_price NUMERIC NOT NULL DEFAULT 0,
    stock INTEGER NOT NULL DEFAULT 0,
    min_stock INTEGER NOT NULL DEFAULT 0,
    unit VARCHAR,
    weight_grams INTEGER NOT NULL DEFAULT 0,
    discount_type INTEGER NOT NULL DEFAULT 1,
    discount_value NUMERIC NOT NULL DEFAULT 0,
    description TEXT,
    rack_location VARCHAR,
    image_url TEXT,
    name TEXT NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT true,
    FOREIGN KEY (category_id) REFERENCES public.categories(id),
    FOREIGN KEY (store_id) REFERENCES public.stores(id)
);

-- provinces
CREATE TABLE public.provinces (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    name VARCHAR NOT NULL,
    country_id UUID NOT NULL,
    FOREIGN KEY (country_id) REFERENCES public.countries(id)
);

-- role_assignments
CREATE TABLE public.role_assignments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    user_id UUID NOT NULL,
    business_id UUID NOT NULL,
    role_id UUID NOT NULL,
    store_id UUID NOT NULL,
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (business_id) REFERENCES public.businesses(id),
    FOREIGN KEY (role_id) REFERENCES public.roles(id),
    FOREIGN KEY (store_id) REFERENCES public.stores(id)
);

-- roles
CREATE TABLE public.roles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    name VARCHAR NOT NULL
);

-- stock_opname_items
CREATE TABLE public.stock_opname_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    session_id UUID NOT NULL,
    product_id UUID NOT NULL,
    expected_qty NUMERIC NOT NULL,
    actual_qty NUMERIC NOT NULL,
    qty_variance NUMERIC GENERATED ALWAYS AS (actual_qty - expected_qty) STORED,
    note TEXT,
    FOREIGN KEY (session_id) REFERENCES public.stock_opname_sessions(id),
    FOREIGN KEY (product_id) REFERENCES public.products(id)
);

-- stock_opname_sessions
CREATE TABLE public.stock_opname_sessions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    store_id UUID NOT NULL,
    started_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    finished_at TIMESTAMP WITH TIME ZONE,
    status TEXT NOT NULL DEFAULT '1',
    total_items INTEGER DEFAULT 0,
    items_counted INTEGER DEFAULT 0,
    total_variance_value NUMERIC DEFAULT 0,
    notes TEXT,
    FOREIGN KEY (store_id) REFERENCES public.stores(id)
);

-- stores
CREATE TABLE public.stores (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    business_id UUID NOT NULL,
    country_id UUID NOT NULL,
    province_id UUID NOT NULL,
    city_id UUID NOT NULL,
    name VARCHAR NOT NULL,
    address TEXT NOT NULL,
    latitude NUMERIC,
    longitude NUMERIC,
    phone_country_code VARCHAR NOT NULL DEFAULT '+62',
    phone_number VARCHAR NOT NULL,
    phone_verified BOOLEAN NOT NULL DEFAULT false,
    business_field TEXT NOT NULL,
    business_description TEXT,
    stock_setting TEXT NOT NULL,
    currency TEXT NOT NULL,
    default_tax_rate NUMERIC NOT NULL DEFAULT 0,
    motto TEXT,
    is_branch BOOLEAN NOT NULL DEFAULT true,
    FOREIGN KEY (business_id) REFERENCES public.businesses(id),
    FOREIGN KEY (country_id) REFERENCES public.countries(id),
    FOREIGN KEY (province_id) REFERENCES public.provinces(id),
    FOREIGN KEY (city_id) REFERENCES public.cities(id)
);

-- users
CREATE TABLE public.users (
    id UUID PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    name TEXT,
    email TEXT NOT NULL,
    phone TEXT,
    FOREIGN KEY (id) REFERENCES auth.users(id)
);

-- store_carts
CREATE TABLE public.store_carts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    store_id UUID NOT NULL,
    product_id UUID NOT NULL,
    quantity SMALLINT NOT NULL DEFAULT 1,
    FOREIGN KEY (store_id) REFERENCES public.stores(id),
    FOREIGN KEY (product_id) REFERENCES public.products(id)
);

-- suppliers
CREATE TABLE public.suppliers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    business_id UUID NOT NULL,
    name VARCHAR NOT NULL,
    code VARCHAR,
    contact_person VARCHAR,
    email VARCHAR,
    phone VARCHAR,
    address TEXT,
    city_id UUID,
    province_id UUID,
    country_id UUID,
    tax_number VARCHAR,
    bank_name VARCHAR,
    bank_account_number VARCHAR,
    bank_account_name VARCHAR,
    credit_limit NUMERIC DEFAULT 0,
    payment_terms INTEGER DEFAULT 0,
    is_active BOOLEAN NOT NULL DEFAULT true,
    notes TEXT,
    FOREIGN KEY (business_id) REFERENCES public.businesses(id),
    FOREIGN KEY (city_id) REFERENCES public.cities(id),
    FOREIGN KEY (province_id) REFERENCES public.provinces(id),
    FOREIGN KEY (country_id) REFERENCES public.countries(id)
);

-- customers
CREATE TABLE public.customers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    business_id UUID NOT NULL,
    name VARCHAR NOT NULL,
    code VARCHAR,
    email VARCHAR,
    phone VARCHAR,
    address TEXT,
    city_id UUID,
    province_id UUID,
    country_id UUID,
    tax_number VARCHAR,
    customer_type VARCHAR DEFAULT 'retail',
    credit_limit NUMERIC DEFAULT 0,
    payment_terms INTEGER DEFAULT 0,
    is_active BOOLEAN NOT NULL DEFAULT true,
    notes TEXT,
    FOREIGN KEY (business_id) REFERENCES public.businesses(id),
    FOREIGN KEY (city_id) REFERENCES public.cities(id),
    FOREIGN KEY (province_id) REFERENCES public.provinces(id),
    FOREIGN KEY (country_id) REFERENCES public.countries(id)
);

-- zmaster (placeholder table)
CREATE TABLE public.zmaster (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID
);

-- payment_types
CREATE TABLE public.payment_types (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    code TEXT NOT NULL,         -- contoh: 'cash', 'edc', 'ewallet', 'bank_transfer'
    name TEXT NOT NULL          -- contoh: 'Tunai', 'EDC', 'E-Wallet', 'Bank Transfer'
);

-- payment_methods (master)
CREATE TABLE public.payment_methods (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    payment_type_id UUID NOT NULL,      -- relasi ke payment_types
    code TEXT NOT NULL,                 -- contoh: 'bca', 'gopay', 'ovo', 'cash'
    name TEXT NOT NULL,                 -- contoh: 'BCA', 'GoPay', 'OVO', 'Tunai'
    FOREIGN KEY (payment_type_id) REFERENCES public.payment_types(id)
);

-- store_payment_methods (update)
CREATE TABLE public.store_payment_methods (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    store_id UUID NOT NULL,
    payment_method_id UUID NOT NULL,    -- relasi ke payment_methods
    is_active BOOLEAN NOT NULL DEFAULT true,
    FOREIGN KEY (store_id) REFERENCES public.stores(id),
    FOREIGN KEY (payment_method_id) REFERENCES public.payment_methods(id)
);

-- ========================================
-- TABEL UNTUK LAPORAN
-- ========================================

-- sales (penjualan)
CREATE TABLE public.sales (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    store_id UUID NOT NULL,
    customer_id UUID,
    sale_number VARCHAR NOT NULL,
    sale_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    subtotal NUMERIC NOT NULL DEFAULT 0,
    discount_amount NUMERIC NOT NULL DEFAULT 0,
    tax_amount NUMERIC NOT NULL DEFAULT 0,
    total_amount NUMERIC NOT NULL DEFAULT 0,
    payment_method_id UUID,
    status VARCHAR NOT NULL DEFAULT 'completed', -- 'completed', 'pending', 'cancelled'
    notes TEXT,
    cashier_id UUID,
    FOREIGN KEY (store_id) REFERENCES public.stores(id),
    FOREIGN KEY (customer_id) REFERENCES public.customers(id),
    FOREIGN KEY (payment_method_id) REFERENCES public.payment_methods(id),
    FOREIGN KEY (cashier_id) REFERENCES public.users(id)
);

-- sales_items (detail item penjualan)
CREATE TABLE public.sales_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    sale_id UUID NOT NULL,
    product_id UUID NOT NULL,
    quantity NUMERIC NOT NULL,
    unit_price NUMERIC NOT NULL,
    discount_amount NUMERIC NOT NULL DEFAULT 0,
    tax_amount NUMERIC NOT NULL DEFAULT 0,
    total_amount NUMERIC NOT NULL,
    FOREIGN KEY (sale_id) REFERENCES public.sales(id),
    FOREIGN KEY (product_id) REFERENCES public.products(id)
);

-- purchases (pembelian)
CREATE TABLE public.purchases (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    store_id UUID NOT NULL,
    supplier_id UUID NOT NULL,
    purchase_number VARCHAR NOT NULL,
    purchase_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    due_date TIMESTAMP WITH TIME ZONE,
    subtotal NUMERIC NOT NULL DEFAULT 0,
    discount_amount NUMERIC NOT NULL DEFAULT 0,
    tax_amount NUMERIC NOT NULL DEFAULT 0,
    total_amount NUMERIC NOT NULL DEFAULT 0,
    payment_method_id UUID,
    payment_terms INTEGER DEFAULT 0,
    status VARCHAR NOT NULL DEFAULT 'pending', -- 'completed', 'pending', 'partial', 'cancelled'
    received_by UUID,
    received_at TIMESTAMP WITH TIME ZONE,
    notes TEXT,
    FOREIGN KEY (store_id) REFERENCES public.stores(id),
    FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id),
    FOREIGN KEY (payment_method_id) REFERENCES public.payment_methods(id),
    FOREIGN KEY (received_by) REFERENCES public.users(id)
);

-- purchases_items (detail item pembelian)
CREATE TABLE public.purchases_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    purchase_id UUID NOT NULL,
    product_id UUID NOT NULL,
    quantity NUMERIC NOT NULL,
    unit_price NUMERIC NOT NULL,
    discount_amount NUMERIC NOT NULL DEFAULT 0,
    tax_amount NUMERIC NOT NULL DEFAULT 0,
    total_amount NUMERIC NOT NULL,
    received_qty NUMERIC DEFAULT 0,
    FOREIGN KEY (purchase_id) REFERENCES public.purchases(id),
    FOREIGN KEY (product_id) REFERENCES public.products(id)
);

-- financial_transactions (transaksi keuangan)
CREATE TABLE public.financial_transactions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    store_id UUID NOT NULL,
    transaction_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    transaction_type VARCHAR NOT NULL, -- 'income', 'expense', 'transfer'
    category VARCHAR NOT NULL, -- 'sales', 'purchase', 'operational', 'marketing', 'other'
    subcategory VARCHAR,
    description TEXT NOT NULL,
    amount NUMERIC NOT NULL,
    payment_method_id UUID,
    account VARCHAR, -- 'cash', 'bank_bca', 'bank_mandiri', etc
    reference_number VARCHAR,
    status VARCHAR NOT NULL DEFAULT 'completed', -- 'completed', 'pending', 'cancelled'
    notes TEXT,
    FOREIGN KEY (store_id) REFERENCES public.stores(id),
    FOREIGN KEY (payment_method_id) REFERENCES public.payment_methods(id)
);

-- receivables (piutang)
CREATE TABLE public.receivables (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    store_id UUID NOT NULL,
    customer_id UUID NOT NULL,
    sale_id UUID,
    reference_number VARCHAR NOT NULL,
    transaction_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    due_date TIMESTAMP WITH TIME ZONE NOT NULL,
    original_amount NUMERIC NOT NULL,
    paid_amount NUMERIC NOT NULL DEFAULT 0,
    remaining_amount NUMERIC GENERATED ALWAYS AS (original_amount - paid_amount) STORED,
    status VARCHAR NOT NULL DEFAULT 'pending', -- 'paid', 'partial', 'overdue', 'pending'
    notes TEXT,
    FOREIGN KEY (store_id) REFERENCES public.stores(id),
    FOREIGN KEY (customer_id) REFERENCES public.customers(id),
    FOREIGN KEY (sale_id) REFERENCES public.sales(id)
);

-- payables (hutang)
CREATE TABLE public.payables (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    store_id UUID NOT NULL,
    supplier_id UUID NOT NULL,
    purchase_id UUID,
    reference_number VARCHAR NOT NULL,
    transaction_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    due_date TIMESTAMP WITH TIME ZONE NOT NULL,
    original_amount NUMERIC NOT NULL,
    paid_amount NUMERIC NOT NULL DEFAULT 0,
    remaining_amount NUMERIC GENERATED ALWAYS AS (original_amount - paid_amount) STORED,
    status VARCHAR NOT NULL DEFAULT 'pending', -- 'paid', 'partial', 'overdue', 'pending'
    notes TEXT,
    FOREIGN KEY (store_id) REFERENCES public.stores(id),
    FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id),
    FOREIGN KEY (purchase_id) REFERENCES public.purchases(id)
);

-- profit_loss_items (item laba rugi)
CREATE TABLE public.profit_loss_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    created_by UUID NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000',
    updated_at TIMESTAMP WITH TIME ZONE,
    updated_by UUID,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    store_id UUID NOT NULL,
    period_start DATE NOT NULL,
    period_end DATE NOT NULL,
    category VARCHAR NOT NULL, -- 'revenue', 'cost_of_goods', 'operating_expense', 'other_income', 'other_expense'
    subcategory VARCHAR NOT NULL,
    description TEXT NOT NULL,
    amount NUMERIC NOT NULL,
    percentage_of_revenue NUMERIC,
    notes TEXT,
    FOREIGN KEY (store_id) REFERENCES public.stores(id)
);